version: 2.1

Parameters: 
   workflow_id: 
     type: string 
     default: '${CIRCLE_WORKFLOW_ID}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id: 
         type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: 
      workflow_id: 
          type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Nc6USUV2dsWuDLAEg9zhfU/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
          
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
              cd backend
              npm install
              npm run test    

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
       - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5d:55:20:4b:e6:6a:ae:7d:dc:3d:08:a5:11:85:0c:9b"
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace: 
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y -q curl && sudo apt-get install -y -q zip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" --output "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
      - restore_cache:
         keys: [backend-build]
      - run: 
          name: Run migrations    
          command: |
             cd backend
             npm install
             npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl -k --insecure https://kvdb.io/Nc6USUV2dsWuDLAEg9zhfU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)  
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5d:55:20:4b:e6:6a:ae:7d:dc:3d:08:a5:11:85:0c:9b"
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - restore_cache:
          keys: [backend-build]       
      - attach_workspace: 
          at: ~/   
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}                   

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y -q curl && sudo apt-get install -y -q awscli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl -s "${API_URL}/api/status" | grep "ok"
              then
                  exit 0
              else
                  exit 2
              fi
            
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
               exit 0
            else
               exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip npm nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \list-exports 
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
               export STACKS=($(aws cloudformation list-stacks 
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
               echo Stack names: "${STACKS[@]}"  
               export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_Workflow_id)     
               echo Old Workflow ID: $OldWorkflowID   
        - run:
           name: Remove old stacks and files
           command: |
              export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_Workflow_id)     
              echo Old Workflow ID: $OldWorkflowID 

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                 #echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version" 

                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

                else

                  #echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
              fi
              

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]